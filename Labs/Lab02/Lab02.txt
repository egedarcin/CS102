CS 102

Lab 02

This assignment is designed to give you experience with object reuse by employing inheritance to extend and modify the behaviour of Java classes. You will use the SimpleURLReader class from the cs1 package. Create your lab02 project from the CS101 console template, as usual, then download this cs1 package (right click and save it) to a convenient location on your local machine (e.g. the folder you are using for this lab assignment.) You now need to add this to your project's classpath so Java can find and use it.

Note that, to complete the assignment, you do not need to know how the SimpleURLReader class works, just treat it like you have been doing with other Java classes. One of the key points of this lab is to demonstrate that you can add to and modify the behaviour of an existing class, even without having its source code. Now that is neat!

(a)    Write a test program that will read the contents of this url and print it and the number of lines it contains, on the console. To read the contents of a url you can use the SimpleURLReader class (see above!) Its constructor takes the desired url as a String, for example "www.cs.bilkent.edu.tr/~ozturk/cs102/assignments/lab02/docs/housman.txt". The class has only two methods: getPageContents() that returns the contents of the url (the webpage) as a String, and getLineCount() that returns an int corresponding to the number of lines read from the url.

(b)   Design, implement and test a new class, MySimpleURLReader, that extends the SimpleURLReader class, adding two methods to it: getURL() that returns the url String used to create the SimpleURLReader object, and getName() that returns the filename part of the url, that is, the part of the url following the last '/' character ("housman.txt" in the previous example). Once this is working, fix the bug in SimpleURLReader's getPageContents() method whereby the String "null" is added to the beginning of the String it returns. Do this by overriding the corresponding method in your new sub-class.

(c)    A customer wants to be able to print the contents of  this other url (an html version of the original plain text) and have it appear as in the part (a) without any of the html code in it! Clearly, it is necessary to read the contents of the url and then filter out the html code so that only the visible text is left. Rather than write an entirely new class from scratch, you realise that the MySimpleURLReader class does most of what you want and so decide to use it. Design, implement & test a new class, HTMLFilteredReader, that extends MySimpleURLReader. Its getPageContents() method should return only the text, without the html. A new method, getUnfilteredPageContents() can be called to return the original page complete with html codes. Assume that anything between "<" and ">" is html code and should be omitted from the filtered output. Solve the problem using charAt(i) and String concatenation.

(d)   You are asked to design and implement a class for the wordSearch program. (You should decide how to design class hierarchy and how to use previous classes). WordSearch program takes the text and search for a set of given words in this text. In this problem, your job is to take html link, filter the html tags and get the text. Don't forget to remove the HTML Punctuation entities from the filtered text. Then search the set of given words and display the found word and place of the word in the text. For ease, you are asked to search only forward, no diagonal, up, or down search is required.
(e)   Html allow web developers to add image and links to their websites. Images are in <img src="url" alt="some_text"> such a format and links are in <a href="url">link text</a> such a format. In images, src tag shows the image name and alt tag is the alternate information for an image if a user for some reason cannot view it. For links, The href attribute specifies the destination address and the link text is the visible part. Your job is to collect information for all images and links and print the format (indicating image or link) and print the image name/ alternative name for images and the url and related link text for the url. As before, you should decide how to design class hierarchy and how to use previous classes.
(f)     Design and implement a simple menu-driven program that will maintain a collection of MySimpleURLReader objects. The main menu should have three options: (1) Literature works, (2) Art works and (3) Leisure. In the option 1, there is another three option menu. (a) Enter the url of poem to add to collection, (b) List all poems in the collection, and (c) Quit. Option 1b should display only the index number & (file) name for each of the poems. The user should then be able to enter the index number of a poem to view it (and then return to the same list.) If the user enters the last index number + 1 they should be returned to the main menu, anything else should be ignored. In option 1a, if the user enters the url of a text file you should create a MySimpleURLReader object and add it to the collection, whereas if they enter the url of an html file you should create an HTMLFilteredReader object and add it to the collection. You should always call the getPageContents() method of the corresponding object to view it from option 1b. In the option 2, you should test part e. In order to test your code, you can use Frida's fan page which contains images and links. In the option 3, you should play the wordSearch game. For word search game, you should use this link and the search words: "This, assignment, designed, give, you, experience, with, object, reuse, employing, inheritance, extend,modify, behaviour, Java, classes".